TreeSet---------->
TreeSet is direct implemented class of navigableSet but indireclty implements sorted set interfaces
It is not and index based data strucutre
It does not follow the insertion order
It follows the sorting order
It cannot store duplicate values
It store homogenous elements 
It is non synchronized data strucutre

1) Write a Java program to create a tree set, add some colors (strings) and print out the tree set.

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		System.out.println(ts);
	}
}

2) Write a Java program to iterate through all elements in a tree set.

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		for(String e : ts) {
			System.out.println(e);
		}
	}
}

3)  Write a Java program to add all the elements of a specified tree set to another tree set.

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		TreeSet<String> ts1 = new TreeSet<String>(ts);
		System.out.println(ts1);
	}
}

4) Write a Java program to create a reverse order view of the elements contained in a given tree set.

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		Iterator itr = ts.descendingIterator();
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
	}
}

5) Write a Java program to get the first and last elements in a tree set

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		System.out.println(ts.first());
		System.out.println(ts.last());
	}
}

6) Write a Java program to clone a tree set list to another tree set.

package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		TreeSet<String> ts1 = (TreeSet)ts.clone();
		System.out.println(ts1);
	}
}

7) Write a Java program to get the number of elements in a tree set.


package hero;
import java.util.*;
public class flat{
	public static void main (String [] args) {
		TreeSet<String> ts = new TreeSet<String>();
		ts.add("red");
		ts.add("blue");
		ts.add("green");
		ts.add("black");
		System.out.println(ts.size());
	}
}

8) Write a Java program to compare two tree sets.

package hero;
import java.util.*;

  public class flat {
  public static void main(String[] args) {
  // Create a empty tree set
        TreeSet<String> t_set1 = new TreeSet<String>();
     // use add() method to add values in the tree set
          t_set1.add("Red");
          t_set1.add("Green");
          t_set1.add("Black");
          t_set1.add("White");
          System.out.println("Free Tree set: "+t_set1);

          TreeSet<String> t_set2 = new TreeSet<String>();
          t_set2.add("Red");
          t_set2.add("Pink");
          t_set2.add("Black");
          t_set2.add("Orange");
          System.out.println("Second Tree set: "+t_set2);
          //comparison output in tree set
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}


9) Write a Java program to find numbers less than 7 in a tree set.

package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(1);
		ts.add(2);
		ts.add(3);
		ts.add(4);
		ts.add(5);
		ts.add(6);
		ts.add(7);
		ts.add(8);
		ts.add(9);
		ts.add(10);
		ts2 = (TreeSet)ts.headSet(7);
		for(Integer e : ts2) {
			System.out.println(e);
		}
	}
}

10) Write a Java program to get the element in a tree set which is greater than or equal to the given element.


package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		System.out.println(ts.ceiling(45));
		System.out.println(ts.ceiling(15));
	}
}

11) Write a Java program to get the element in a tree set less than or equal to the given element.

package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		System.out.println(ts.floor(45));
		System.out.println(ts.floor(15));
	}
}

12)Write a Java program to get the element in a tree set strictly greater than  the given element.

package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		System.out.println(ts.higher(45));
		
	}
}


13) Write a Java program to get an element in a tree set that has a lower value than the given element.


package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		System.out.println(ts.lower(45));
		
	}
}


14) Write a Java program to retrieve and remove the first and last element of a tree set.

package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		ts.pollFirst();
		ts.pollLast();
		System.out.println(ts);
		
	}
}


15) Write a java progarm to remove all elements in a tree..

package hero;
import java.util.*;
public class flat{
	public static void main(String [] args) {
		TreeSet<Integer> ts = new TreeSet<Integer>();
		TreeSet<Integer> ts2 = new TreeSet<Integer>();
		ts.add(10);
		ts.add(25);
		ts.add(39);
		ts.add(45);
		ts.add(54);
		ts.add(67);
		ts.add(78);
		ts.add(89);
		ts.add(90);
		ts.add(100);
		ts.pollFirst();
		ts.pollLast();
		System.out.println(ts);
		
	}
}


